package com.nkds.myapp.controller;

import java.lang.reflect.Method;
import java.util.HashMap;
import java.util.Map;

import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.context.ApplicationContext;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.servlet.ModelAndView;
import org.springframework.web.servlet.support.RequestContextUtils;

import com.nkds.myapp.util.ServiceInfo;

/**
 * Handles requests for the application home page.
 */
@Controller
public class NamController extends HttpServlet {

	private static final Logger logger = LoggerFactory
			.getLogger(NamController.class);

	/**
	 * Simply selects the home view to render by returning its name.
	 * @throws Exception 
	 */
	@RequestMapping(value = "*.do", method = RequestMethod.GET)
	public ModelAndView processGet(HttpServletRequest request,
			HttpServletResponse response) throws Exception {
		return doProcess(request, response);
	}

	@RequestMapping(value = "*.do", method = RequestMethod.POST)
	public ModelAndView processPost(HttpServletRequest request,
			HttpServletResponse response) throws Exception {
		return doProcess(request, response);
	}

	private ModelAndView doProcess(HttpServletRequest request,
			HttpServletResponse response) throws Exception {
		Object returnVO = null;
		BeanFactory beanFactory = new BeanFactory();
		ApplicationContext context = RequestContextUtils.getWebApplicationContext(request);
		beanFactory.setApplicationContext(context);
		ModelAndView mav = new ModelAndView();
		String viewName = request.getServletPath().replace("/", "")
				.replace(".do", "");
		
		
		ServiceInfo serviceInfo = new ServiceInfo(request.getParameterNames(), request);
		
		returnVO = processServiceLogic(serviceInfo, new String());
		
		System.out.println(viewName);
		mav.setViewName(viewName);
		mav.addObject(returnVO);

		return mav;
	}

	private Object processServiceLogic(ServiceInfo serviceInfo, Object...args) throws Exception {
		System.out.println("serviceInfo.getBeanName():"+serviceInfo.getBeanName());
		Object targetBean = BeanFactory.getBean(serviceInfo.getBeanName());
		Method method = targetBean.getClass().getMethod(serviceInfo.getMethodName(), Class.forName(serviceInfo.getParameterTypeName()));
		System.out.println(method.toString());
		return method.invoke(serviceInfo, args);
	}

}
